// Generated by view binder compiler. Do not edit!
package com.example.javaapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.javaapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogBoxBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView dispEmail;

  @NonNull
  public final TextView dispName;

  @NonNull
  public final LinearLayout holder;

  @NonNull
  public final TextView removeEmail;

  @NonNull
  public final TextView removeName;

  @NonNull
  public final TextView textDialog;

  @NonNull
  public final ImageView userImage;

  private DialogBoxBinding(@NonNull RelativeLayout rootView, @NonNull TextView dispEmail,
      @NonNull TextView dispName, @NonNull LinearLayout holder, @NonNull TextView removeEmail,
      @NonNull TextView removeName, @NonNull TextView textDialog, @NonNull ImageView userImage) {
    this.rootView = rootView;
    this.dispEmail = dispEmail;
    this.dispName = dispName;
    this.holder = holder;
    this.removeEmail = removeEmail;
    this.removeName = removeName;
    this.textDialog = textDialog;
    this.userImage = userImage;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogBoxBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogBoxBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_box, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogBoxBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dispEmail;
      TextView dispEmail = ViewBindings.findChildViewById(rootView, id);
      if (dispEmail == null) {
        break missingId;
      }

      id = R.id.dispName;
      TextView dispName = ViewBindings.findChildViewById(rootView, id);
      if (dispName == null) {
        break missingId;
      }

      id = R.id.holder;
      LinearLayout holder = ViewBindings.findChildViewById(rootView, id);
      if (holder == null) {
        break missingId;
      }

      id = R.id.removeEmail;
      TextView removeEmail = ViewBindings.findChildViewById(rootView, id);
      if (removeEmail == null) {
        break missingId;
      }

      id = R.id.removeName;
      TextView removeName = ViewBindings.findChildViewById(rootView, id);
      if (removeName == null) {
        break missingId;
      }

      id = R.id.textDialog;
      TextView textDialog = ViewBindings.findChildViewById(rootView, id);
      if (textDialog == null) {
        break missingId;
      }

      id = R.id.userImage;
      ImageView userImage = ViewBindings.findChildViewById(rootView, id);
      if (userImage == null) {
        break missingId;
      }

      return new DialogBoxBinding((RelativeLayout) rootView, dispEmail, dispName, holder,
          removeEmail, removeName, textDialog, userImage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
